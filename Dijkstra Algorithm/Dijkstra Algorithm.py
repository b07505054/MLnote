# -*- coding: utf-8 -*-
"""sp

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RsfxPCniwA-UwlJ5ICSiXL3nfkyiC0Wt
"""

from topo import Topo
import numpy as np
def length(lst):
  sum=0
  for i in range(0,len(lst)):
    if(lst[i]==-1):
      sum+=1
  return len(lst)-sum
def newroute(n, iter, topolink, temp , value,Pred):
  for i in range(0,len(temp)):
    if(np.any(n==i)):
      continue
    elif(topolink[int(n[iter])][i] != 0 and topolink[int(n[iter])][i] + value[int(n[iter])] < temp[i]):
      temp[i]=int(topolink[int(n[iter])][i]+value[int(n[iter])])
      Pred[i]=int(n[iter])
    elif(topolink[i][int(n[iter])] != 0 and topolink[i][int(n[iter])] + value[int(n[iter])] < temp[i]):
      temp[i]=int(topolink[i][int(n[iter])]+value[int(n[iter])])
      Pred[i]=int(n[iter])
    else:
      continue
  

  
    
start = 0

myTopo = Topo('input.txt')

N = np.zeros((myTopo.numNodes, 1))
D = np.zeros((myTopo.numNodes, 1))
p = np.zeros((myTopo.numNodes, 1))

for i in range(myTopo.numNodes):
    D[i] = -1
    p[i] = -1
    N[i] = -1

N[0] = start # definitively known node
D[start] = 0 # current value of cost of path
p[start] = start # predecessor node

# TODO: your codes here
temp= np.zeros((myTopo.numNodes, 1))
for i in range(myTopo.numNodes):
    temp[i] = 1000000
iter=0
while(iter < myTopo.numNodes):
  for i in range(0,len(N)):
    temp[int(N[i])]=1000000
  min=1000000
  index=-1
  
  newroute(N,iter,myTopo.links,temp,D,p)
  for i in range(0,myTopo.numNodes):
    if(temp[i]<min):
      min=temp[i]
      index=i
      
    else:
      continue
  try:
    N[iter+1]=index
    D[index]=temp[index]
  except:
    pass
  iter+=1
  print(N.flatten())
for i in range(1, myTopo.numNodes):
    print(int(p[i]), ' --> ', i, ' cost = ', int(D[i]))